--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - sram_poc.v
  top_module:  "tt_um_urish_sram_poc"      # Put the name of your top module here, must start with "tt_um_". Make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
# Before changing this, please reach out to us on discord to discuss your design.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 3.5

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Uri Shaked"      # Your name
  title:        "SRAM Controller PoC (2 kbyte)"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "2 kbyte SRAM controller module"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      This is a 2 kbyte SRAM controller module. It allows reading or writing a single byte at a time. 
      There are 11 address lines, 8 data lines, and 1 write enable line. 
      To read a byte, set the write enable line (wen) to 0, and the data lines (out[7:0]) will be set to the value of the 
      byte at the address specified by the address lines (addr[5:0]).
      To write a byte, set the write enable line (wen) to 1, and set the data lines (in[7:0]) to the desired value. Writing is only possible
      when the bank_sel line is 0.
      The lower 6 address bits (addr[5:0]) are exposed as input pins. 
      The upper 5 address lines are stored in the address_bank register. To change the upper 5 address bits,
      set the bank_sel line to 1, and set the data lines (addr[10:6] or in[2:0]) to the desired value.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Set addr[5:0] to the desired address, set in[7:0] to the desired value, set wen to 1, and set bank_sel to 0, then pulse
      the clock line. The value at the specified address should be updated to the value of in[7:0].
      Set addr[5:0] to the desired address, set wen to 0, and set bank_sel to 0, then pulse the clock line. The value at the specified
      address should be output on out[7:0].
      Set addr[10:6] to the desired value, set bank_sel to 1, then pulse the clock line. The upper 3 address bits should be updated to the
      value of addr[10:6].

# A description of what the inputs do
  inputs:               
    - addr[0]
    - addr[1]
    - addr[2]
    - addr[3]
    - addr[4]
    - addr[5]
    - bank_sel
    - wen
# A description of what the outputs do
  outputs:
    - out[0]
    - out[1]
    - out[2]
    - out[3]
    - out[4]
    - out[5]
    - out[6]
    - out[7]
# A description of what the bidirectional I/O pins do
  bidirectional:
    - in[0] (when bank_sel = 0), addr[6] (when bank_sel = 1)
    - in[1] (when bank_sel = 0), addr[7] (when bank_sel = 1) 
    - in[2] (when bank_sel = 0), addr[8] (when bank_sel = 1)
    - in[3] (when bank_sel = 0), addr[9] (when bank_sel = 1)
    - in[4] (when bank_sel = 0), addr[10] (when bank_sel = 1)
    - in[5]
    - in[6]
    - in[7]

# The following fields are optional
  tag:          "ram"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "none"     # Describe any external hardware needed
  discord:      "urish#8086"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
